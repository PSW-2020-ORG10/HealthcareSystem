// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SearchMicroserviceApi.DbContextModel;

namespace SearchMicroserviceApi.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20210123194848_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SearchMicroserviceApi.Model.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Equipment");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Equipment");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Name = "Equipment name",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.ModelEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("ModelEquipment");
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.ModelMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("ModelMedicine");
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.ModelRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("modelRooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data = "data",
                            EquipmentId = 1
                        });
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.PrescribedMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("HowToUse")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescribedMedicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HowToUse = "Every 8 hours",
                            MedicineId = 1,
                            PrescriptionId = 5,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            HowToUse = "Whenever headache reapers",
                            MedicineId = 2,
                            PrescriptionId = 5,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 3,
                            HowToUse = "Every 12 hours.",
                            MedicineId = 3,
                            PrescriptionId = 5,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 4,
                            HowToUse = "Take one when body temperature exceedes 39 degrees",
                            MedicineId = 4,
                            PrescriptionId = 5,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 5,
                            HowToUse = "Every 8 hours",
                            MedicineId = 1,
                            PrescriptionId = 6,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 6,
                            HowToUse = "Whenever headache reapers",
                            MedicineId = 2,
                            PrescriptionId = 6,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 7,
                            HowToUse = "Every 12 hours.",
                            MedicineId = 3,
                            PrescriptionId = 6,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 8,
                            HowToUse = "Take one when body temperature exceedes 39 degrees",
                            MedicineId = 4,
                            PrescriptionId = 6,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 9,
                            HowToUse = "Take one when body temperature exceedes 39 degrees",
                            MedicineId = 2,
                            PrescriptionId = 1,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 10,
                            HowToUse = "Every 12 hours.",
                            MedicineId = 3,
                            PrescriptionId = 1,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 11,
                            HowToUse = "Every 8 hours",
                            MedicineId = 1,
                            PrescriptionId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 12,
                            HowToUse = "Whenever headache reapers",
                            MedicineId = 2,
                            PrescriptionId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 13,
                            HowToUse = "Every 8 hours",
                            MedicineId = 1,
                            PrescriptionId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 14,
                            HowToUse = "Whenever headache reapers",
                            MedicineId = 2,
                            PrescriptionId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 15,
                            HowToUse = "Every 12 hours.",
                            MedicineId = 3,
                            PrescriptionId = 3,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 16,
                            HowToUse = "Every 8 hours",
                            MedicineId = 1,
                            PrescriptionId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 17,
                            HowToUse = "Whenever headache reapers",
                            MedicineId = 2,
                            PrescriptionId = 4,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 18,
                            HowToUse = "Every 12 hours.",
                            MedicineId = 3,
                            PrescriptionId = 4,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 19,
                            HowToUse = "Every 12 hours.",
                            MedicineId = 3,
                            PrescriptionId = 7,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 20,
                            HowToUse = "Every 8 hours",
                            MedicineId = 1,
                            PrescriptionId = 7,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Patientsid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            Comment = "In case of allergy, stop taking medicine immediately.",
                            DoctorId = 1,
                            IsUsed = false,
                            Patientsid = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            Comment = "After finishing treatment, schedule control appointment.",
                            DoctorId = 1,
                            IsUsed = true,
                            Patientsid = 2
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            Comment = "If illnness stops, stop taking medicine.",
                            DoctorId = 2,
                            IsUsed = true,
                            Patientsid = 1
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            Comment = "In case of allergy, stop taking medicine immediately.",
                            DoctorId = 1,
                            IsUsed = false,
                            Patientsid = 1
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 5,
                            Comment = "After finishing treatment, schedule control appointment.",
                            DoctorId = 1,
                            IsUsed = true,
                            Patientsid = 2
                        },
                        new
                        {
                            Id = 6,
                            AppointmentId = 6,
                            Comment = "If illnness stops, stop taking medicine.",
                            DoctorId = 2,
                            IsUsed = true,
                            Patientsid = 1
                        },
                        new
                        {
                            Id = 7,
                            AppointmentId = 7,
                            Comment = "In case of allergy, stop taking medicine immediately.",
                            DoctorId = 1,
                            IsUsed = false,
                            Patientsid = 1
                        },
                        new
                        {
                            Id = 8,
                            AppointmentId = 8,
                            Comment = "After finishing treatment, schedule control appointment.",
                            DoctorId = 1,
                            IsUsed = true,
                            Patientsid = 2
                        },
                        new
                        {
                            Id = 9,
                            AppointmentId = 9,
                            Comment = "If illnness stops, stop taking medicine.",
                            DoctorId = 2,
                            IsUsed = true,
                            Patientsid = 1
                        },
                        new
                        {
                            Id = 10,
                            AppointmentId = 10,
                            Comment = "In case of allergy, stop taking medicine immediately.",
                            DoctorId = 1,
                            IsUsed = false,
                            Patientsid = 1
                        },
                        new
                        {
                            Id = 11,
                            AppointmentId = 11,
                            Comment = "After finishing treatment, schedule control appointment.",
                            DoctorId = 1,
                            IsUsed = true,
                            Patientsid = 2
                        },
                        new
                        {
                            Id = 12,
                            AppointmentId = 12,
                            Comment = "If illnness stops, stop taking medicine.",
                            DoctorId = 2,
                            IsUsed = true,
                            Patientsid = 1
                        },
                        new
                        {
                            Id = 13,
                            AppointmentId = 13,
                            Comment = "In case of allergy, stop taking medicine immediately.",
                            DoctorId = 1,
                            IsUsed = false,
                            Patientsid = 1
                        },
                        new
                        {
                            Id = 14,
                            AppointmentId = 14,
                            Comment = "After finishing treatment, schedule control appointment.",
                            DoctorId = 1,
                            IsUsed = true,
                            Patientsid = 2
                        },
                        new
                        {
                            Id = 15,
                            AppointmentId = 15,
                            Comment = "If illnness stops, stop taking medicine.",
                            DoctorId = 2,
                            IsUsed = true,
                            Patientsid = 1
                        });
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ForUse")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeOfRoom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ForUse = true,
                            TypeOfRoom = "typeOfRoom"
                        });
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.Medicine", b =>
                {
                    b.HasBaseType("SearchMicroserviceApi.Model.Equipment");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("Medicine");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pancef 300mg",
                            Quantity = 44,
                            Description = "For temperature"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Defrinol 100mg",
                            Quantity = 2,
                            Description = "For headache"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Brufen 200mg",
                            Quantity = 2,
                            Description = "For illness"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Paracetamol 200mg",
                            Quantity = 4,
                            Description = "For temperature"
                        });
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.OfferedMedicines", b =>
                {
                    b.HasBaseType("SearchMicroserviceApi.Model.Medicine");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasDiscriminator().HasValue("OfferedMedicines");
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.ModelEquipment", b =>
                {
                    b.HasOne("SearchMicroserviceApi.Model.Room", "Room")
                        .WithMany("Equipment")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.ModelMedicine", b =>
                {
                    b.HasOne("SearchMicroserviceApi.Model.Room", "Room")
                        .WithMany("Medicine")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.ModelRoom", b =>
                {
                    b.HasOne("SearchMicroserviceApi.Model.Equipment", "Equipment")
                        .WithMany("Room")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SearchMicroserviceApi.Model.PrescribedMedicine", b =>
                {
                    b.HasOne("SearchMicroserviceApi.Model.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SearchMicroserviceApi.Model.Prescription", null)
                        .WithMany("Medicines")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
